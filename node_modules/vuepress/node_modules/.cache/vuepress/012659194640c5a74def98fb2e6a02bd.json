{"remainingRequest":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!C:\\Users\\Objec\\Desktop\\LearningNote\\docs\\swtest\\design-testcase2.md?vue&type=template&id=303d3223&","dependencies":[{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\docs\\swtest\\design-testcase2.md","mtime":1559711629834},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1559711637495},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1559711718187},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1559711637495},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vue-loader\\lib\\index.js","mtime":1559711718171},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1559711720027}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h2 id=\\\"“好的”测试用例\\\"><a href=\\\"#“好的”测试用例\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> “好的”测试用例</h2> <p>​\\t一般会说：发现了软件缺陷的测试用例就是好用例吗？发现缺陷可能性大的测试用例就是好用例？发现至今未被发现的软件缺陷的测试用例就是好用例？</p> <p>​\\t<strong>“好的”测试用例是一个完备的集合，可以覆盖所有等价类以及各种边界值，跟能否发现缺陷没有直接的关系</strong></p> <p>​\\t&quot;好的&quot;测试用例具备&quot;整体完整性&quot;、&quot;等价类划分的准确性&quot;、&quot;等价类集合的完备性&quot;</p> <p>​\\t为了设计出好的测试用例，需要使用哪些设计方法呢？测试方法理论上有很多种：等价类划分、边界值、错误推测、探索式、因果图、判定表、场景分析、正交实验设计、功能图分析等等。但实际上常用的方法：<u><strong>等价类划</strong>分</u>、<u><strong>边界值</strong></u>、<u><strong>错误推测</strong></u></p> <p>​\\t举个例子：某系统有一个输入分数的输入框，分数的范围0-100之间的整数来录入，及格分数是60。根据上面常用的方法来设计好的测试用例：</p> <ol><li><p>有效等价类0~59、60~100</p></li> <li><p>无效等价类&lt;0、&gt;100、0~100内的浮点数、任意非数字的字符</p></li> <li><p>边界值-1、0、1、59、60、61、99、100、101</p></li></ol> <p>​\\t再比如说面向终端用户的GUI测试，最重要的测试点就是验证软件对需求的满足程度。在需求分析和设计阶段开始介入，这样能更好的理解业务需求，在具体设计用例时，第一步搞清楚每一个业务需求所对应的多个软件功能需求点，第二步每个功能需求点对应多个测试点，第三步针对每个测试点设计测试用例</p> <h2 id=\\\"用例设计的其他经验\\\"><a href=\\\"#用例设计的其他经验\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 用例设计的其他经验</h2> <ul><li><p>深入理解被测试软件的架构，主要途径参与前期架构和设计、review或者阅读架构文档。比如数据库连接方式、数据库的读写分离、缓存系统的层级分布、第三方系统的集成、消息中间件Kafka的配置</p></li> <li><p>深入理解被测软件的设计和实现细节，比如通过代码覆盖指标找出可能的测试遗漏点。要理解被测软件的设计，需要测试人员多了解开发相关的知识，也是提升自身技能的一个方向</p></li> <li><p>引入需求覆盖率和代码覆盖率衡量测试执行的完备性</p> <h2 id=\\\"总结\\\"><a href=\\\"#总结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 总结</h2> <p>写用例的时候最重要的是对需求的分析和补充，加上自己的经验，用例简洁清晰，描述到位，层次结构清晰。实际过程中暴露出的问题，一定要及时的对用例进行补充和完善，总结反思。补充一般写用例的时候构成点：测试模块名称、用例名称、测试目的、测试前提、测试步骤、通过标准、优先级、测试结果</p> <p>分析测试点的时候，可以用xmind来整理需求，在每个需求分支上补充测试点。那么怎么管理这些用例呢，可以用一些工具，比如JIRA、TestLink、ALM等等</p></li></ul>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}