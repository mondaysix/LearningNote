{"remainingRequest":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!C:\\Users\\Objec\\Desktop\\LearningNote\\docs\\VersionControl\\gitlearn\\problems.md?vue&type=template&id=670145a0&","dependencies":[{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\docs\\VersionControl\\gitlearn\\problems.md","mtime":1564214962662},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1559711637495},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1559711718187},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1559711637495},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vue-loader\\lib\\index.js","mtime":1559711718171},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1559711720027}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"一、git查看/修改用户名和密码\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"​\\t在使用git进行push代码的时候，提示：The Requested URL return error 403，表示没有相关权限来push相关代码\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"​\\tpush相关代码的那个工程地址与内存和硬盘中缓存的git仓库的账号密码不一致\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"解决办法如下：\")]),\n      _vm._v(\" \"),\n      _c(\"ol\", [\n        _c(\"li\", [\n          _vm._v(\n            \"执行git config --list，查看user.name和user.email是否与需要push的代码工程仓库账号邮箱一致，不一致需要更改账号\"\n          )\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\n            \"清除缓存:\\ngit config --local --unset credential.helper\\ngit config --global --unset credential.helper\\ngit config --system --unset credential.helper\"\n          )\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"清除缓存后提交代码需要重新输入用户名密码\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\n            \"查看当前的用户名和邮箱地址：\\ngit config user.name\\ngit config user.email\"\n          )\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\n            '修改用户名和邮箱地址:\\ngit config --global user.name \"username\"\\ngit config --global user.email \"email\"'\n          )\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"二、更新代码至远程仓库流程\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"em\", [\n          _c(\"strong\", [\n            _vm._v(\"提交代码前确认当前的分支以及先更新最新的代码！！！\")\n          ])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"git branch 查看当前分支\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"git pull 更新代码至本地\")]),\n      _vm._v(\" \"),\n      _c(\"ol\", [\n        _c(\"li\", [_vm._v(\"git status 查看当前工程中modified了哪些文件\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"git add . 一次性添加所有修改过的文件\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v('git commit -m \"修改的相关描述XXX\"')]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"git push origin master 推送到git 远程仓库\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"git log 查看提交日志\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"三、更新远程代码至本地\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"git pull -u origin master:<分支名称>\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"默认可直接使用git pull\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"四、将文件添加至Index暂存\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"git add用于把要提交的文件的信息添加到索引库中\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"strong\", [_vm._v(\"git add .\")]),\n        _vm._v(\n          \"  监控工作区的状态树，把工作时的所有变化提交到暂存区，包括modified和new的文件，但是不包括被删除的文件\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"strong\", [_vm._v(\"git add -u\")]),\n        _vm._v(\n          \"  仅监控已经被add的文件（tracked file），将被修改的文件提交到暂存区，不会提交untracked file\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"strong\", [_vm._v(\"git add -A\")]),\n        _vm._v(\"   是上面两个命令的功能合集\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"五、删除远程仓库里的文件夹\")])]),\n      _vm._v(\" \"),\n      _c(\"ol\", [\n        _c(\"li\", [_vm._v(\"git clone <远程仓库地址>\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"git rm -rf <需要删除的文件夹>\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\n            \"如果需要删除的文件太多了，直接在文件夹里删除，不需要使用rm，但删除后需要执行git add .\"\n          )\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v('git commit -m \"描述语句\"')]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"git push origin master\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"如果分支的名称不是master，则提交到git仓库 时，需要显示指定分支名称 git push -u origin master：<分支名称>\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"六、分支相关操作\")])]),\n      _vm._v(\" \"),\n      _c(\"ol\", [\n        _c(\"li\", [_vm._v(\"git branch 查看当前分支\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"git checkout <分支名称> 切换到新的分支\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"git branch <新分支名称>创建新的分支\")])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"七、使用ssh密钥\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"SSH 公钥默认储存在账户的主目录下的 ~/.ssh 目录\")]),\n      _vm._v(\" \"),\n      _c(\"ol\", [\n        _c(\"li\", [_c(\"p\", [_vm._v(\"cd ./.ssh/\")])]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [_vm._v('ssh-keygen -t rsa -C \"email@youremail.com\"')])\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [_c(\"p\", [_vm._v(\"直接回车就行\")])]),\n        _vm._v(\" \"),\n        _c(\"li\", [_c(\"p\", [_vm._v(\"ls查看下是否生成id_rsa.pub和id_rsa\")])]),\n        _vm._v(\" \"),\n        _c(\"li\", [_c(\"p\", [_vm._v(\"把id_rsa.pub密钥添加到远程仓库中\")])]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _c(\"p\", [_vm._v(\"验证下key是否可以正常工作 ssh -T git@github.com\")])\n        ])\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"八、下载github仓库中的部分文件夹\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"git版本>2.17.1\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"要是git的版本低于2.17.1，则需要更新git版本:\")]),\n      _vm._v(\" \"),\n      _c(\"ul\", [\n        _c(\"li\", [_c(\"p\", [_vm._v(\"2.17.1之前版本用git update\")])]),\n        _vm._v(\" \"),\n        _c(\"li\", [_c(\"p\", [_vm._v(\"2.17.1之后用git update-git-for-windows\")])])\n      ]),\n      _vm._v(\" \"),\n      _c(\"ol\", [\n        _c(\"li\", [_vm._v(\"创建新文件夹mkdir projects\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"git init\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\n            \"git remote add -f origin git@github.com:username/responsity.git\"\n          )\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"git config core.sparseCheckout true\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v('echo \"远程仓库文件夹路径\" >> .git/info/sparse-checkout')\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"git pull origin master\")])\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}