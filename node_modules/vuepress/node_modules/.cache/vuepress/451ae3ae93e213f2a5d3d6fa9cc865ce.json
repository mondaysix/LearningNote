{"remainingRequest":"G:\\code\\LearningNote\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!G:\\code\\LearningNote\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!G:\\code\\LearningNote\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!G:\\code\\LearningNote\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!G:\\code\\LearningNote\\docs\\swtest\\test-coverage.md?vue&type=template&id=eee1a1b2&","dependencies":[{"path":"G:\\code\\LearningNote\\docs\\swtest\\test-coverage.md","mtime":1558707977063},{"path":"G:\\code\\LearningNote\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\code\\LearningNote\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"G:\\code\\LearningNote\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\code\\LearningNote\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"G:\\code\\LearningNote\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"测试覆盖率\\\"><a href=\\\"#测试覆盖率\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 测试覆盖率</h1> <p>主要分为两类，一个是面向项目的需求覆盖率，一个是偏向技术的代码覆盖率</p> <h2 id=\\\"需求覆盖率\\\"><a href=\\\"#需求覆盖率\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 需求覆盖率</h2> <p>测试对需求的覆盖程度，将每条分解后的软件需求和对应的测试用例建立一对多的关系，保证测试可以覆盖每个需求。通常采用TestLink、ALM、Doors等等需求管理工具建立需求和测试的对应关系</p> <p>需求覆盖率统计方法属于传统瀑布模型下的软件工程实践，目前都是将软件的需求转换成测试需求，然后基于测试需求来设计测试点</p> <h2 id=\\\"代码覆盖率\\\"><a href=\\\"#代码覆盖率\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码覆盖率</h2> <p>指至少被执行了一次的代码行、函数、路径等等占整个条目数的百分比。常见的代码覆盖率指标有语句覆盖、判定覆盖、条件覆盖</p> <p>代码覆盖率反应的是已有代码的哪些逻辑被执行了，哪些逻辑还没有被执行过，以此为依据，补充测试用例，去测试那些还没有覆盖到的执行路径</p> <h2 id=\\\"代码覆盖率工具\\\"><a href=\\\"#代码覆盖率工具\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 代码覆盖率工具</h2> <p>java主流的代码覆盖率工具JaCoCo</p>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}