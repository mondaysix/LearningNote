{"remainingRequest":"G:\\code\\LearningNote\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!G:\\code\\LearningNote\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!G:\\code\\LearningNote\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!G:\\code\\LearningNote\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!G:\\code\\LearningNote\\docs\\android\\appBase.md?vue&type=template&id=191483b1&","dependencies":[{"path":"G:\\code\\LearningNote\\docs\\android\\appBase.md","mtime":1559139013697},{"path":"G:\\code\\LearningNote\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\code\\LearningNote\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"G:\\code\\LearningNote\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\code\\LearningNote\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"G:\\code\\LearningNote\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h1\", { attrs: { id: \"android-app基础知识\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#android-app基础知识\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Android APP基础知识\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"activity\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#activity\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Activity\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _c(\"strong\", [_vm._v(\"生命周期\")]),\n        _vm._v(\n          \"：onCreate()-->onStart()-->onResume()-->onPause()-->onStop()--->onRestart()-->onDestroy()\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"启动Activity：onCreate()-->onStart()-->onResume()然后Activity进入运行状态\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"当前Activity被其他Activity覆盖,调用onPause()\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"当前ACTIVITY回到前台，调用OnResume\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_c(\"strong\", [_vm._v(\"启动模式\")])]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"Standard（每次都会创建一个activity）、\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"singleTop（栈顶复用）：若需要创建的activity处于栈顶，则直接复用，onNewIntent（传入新的intent）会被调用。如果没有处于栈顶则和standard模式一致\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"singleTask(栈内复用)：若需要创建的activity处于栈内，则把存在他上面的所有activity都销毁\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"singleInstance(全局单例模式)：整个系统中只有一个\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"启动模式方式：\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"​       manifest.xml中静态指定，launchMode\")]),\n      _vm._v(\" \"),\n      _c(\"pre\", [_c(\"code\", [_vm._v(\"intent中动态指定：addFlags\\n\")])]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"service\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#service\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" Service\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"启动方式：startservice和bindservice\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"**startservice：**启动一个服务执行后台任务，不进行通信，停止服务使用stopservice\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"生命周期：startservice—>oncreate--->onstartcommand--->service running—>ondestroy\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"**bindservice:**启动服务可以进行通信，停止服务使用unbindservice\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"生命周期：bindservice---》oncreate---》onbind---》client are bound to service---》onunbind---》ondestroy\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"service需要注册在manifest\")]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"两者的区别：startservice与客户端是否退出没有关联关系，即使客户端停止运行，服务同样也会在后台运行。bindservice是与客户端绑定的，客户端退出，service也自动停止\"\n        )\n      ]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"broadcastreceiver\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#broadcastreceiver\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" BroadcastReceiver\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"静态注册和动态注册\")]),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"contentprovider\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#contentprovider\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" ContentProvider\")\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}