{"remainingRequest":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!C:\\Users\\Objec\\Desktop\\LearningNote\\docs\\swtest\\test-search.md?vue&type=template&id=3451fdfd&","dependencies":[{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\docs\\swtest\\test-search.md","mtime":1564218799472},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1559711637495},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1559711718187},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1559711637495},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vue-loader\\lib\\index.js","mtime":1559711718171},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1559711720027}],"contextDependencies":[],"result":["\n<div class=\"content\"><h3 id=\"探索式测试\"><a class=\"header-anchor\" href=\"#探索式测试\" aria-hidden=\"true\">#</a> 探索式测试</h3>\n<p>​\t一种软件测试风格，同时开展测试学习、测试设计、测试执行和测试结果评估等一系列的活动哦，以持续优化测试工作。在较短的时间内快速完成多次循环，以此来不断收集反馈、调整测试、优化价值。测试工程师不断提出假设，通过测试执行去检验假设，通过解读测试结果证实或推翻假设</p>\n<p>​\t首先对软件单一功能进行比较细致的探索式测试。基于功能需求以及非功能性需求进行扩展和延伸，站在最终用户的角度去理解和使用，了解真正的业务需求，基于这些业务需求探索软件的功能是否可用满足业务需求</p>\n<h3 id=\"测试驱动开发tdd\"><a class=\"header-anchor\" href=\"#测试驱动开发tdd\" aria-hidden=\"true\">#</a> 测试驱动开发TDD</h3>\n<p>​\tTDD是一种开发理念，在开发人员实现功能代码前，先设计好测试用例的代码，然后根据测试用例的代码编写产品的功能代码，最终目的是让开发前设计的测试用例代码都能够顺利执行通过，相当于把测试提到了需求定义的高度，跑到软件研发生命周期的前面</p>\n<ol>\n<li>\n<p>保证开发的功能一定是符合实际需求的</p>\n<p>先根据用户的实际需求编写测试用例，再根据测试用例来完成功能代码，这样就不会出现浪费时间的没有必要的功能</p>\n</li>\n<li>\n<p>更加灵活的迭代方式</p>\n<p>以测试用例描述，非常具体，开发人员可先开发一个明确的针对用户某个功能的代码，通过自测试、修改使得代码符合预期，而不是等所有功能开发完成后再交给测试人员进行长周期的测试，</p>\n</li>\n<li>\n<p>保证系统的可扩展性</p>\n<p>开发人员设计更松耦合的系统，保证它的可扩展和容易修改，当用户需求有变化时，通过设计的接口快速实现新功能，满足新的测试场景</p>\n</li>\n<li>\n<p>更好的质量保证</p>\n<p>每次新增功能时，先用测试用例去验证功能是否运行正常，并运行所有的测试来保证整个系统的质量</p>\n</li>\n<li>\n<p>测试用例即文档</p>\n<p>TDD过程中编写的测试用例，首先是贴合用户需求的，也是符合系统的业务逻辑的，这样测试用例可生成需求文档，比如JavaDoc</p>\n</li>\n</ol>\n<p>例如：用户输入自己的生日，就可用输出还要多少天到下次生日</p>\n<p>先设计测试用例：用户输入空字符串或者null、用户输入的生日格式不符合YYYY-MM-dd格式、用户输入生日但今年生日已经过了，应该返回离明年的生日还有多少天、今年生日还没过，返回的结果应该不大于365、今年生日就是今天返回结果0</p>\n<p>再根据用例编写完成的功能代码覆盖用户可能说如的场景</p>\n<h3 id=\"精准测试\"><a class=\"header-anchor\" href=\"#精准测试\" aria-hidden=\"true\">#</a> 精准测试</h3>\n<p>​\t借助一定的技术手段、通过算法的辅助对传统软件测试过程进行可视化、分析以及优化的过程。目前业界最成熟已经产品化的精准测试体系“星云测试”</p>\n<h3 id=\"渗透测试\"><a class=\"header-anchor\" href=\"#渗透测试\" aria-hidden=\"true\">#</a> 渗透测试</h3>\n<p>​\t由专业安全人员模拟黑客，从其可能存在的位置对系统进行攻击测试，在真正的黑客入侵前找到隐藏的安全漏洞，从而达到保护系统安全的目的。</p>\n<ol>\n<li>\n<p>有针对性的测试</p>\n<p>由公司内部员工和专业渗透测试团队共同完成</p>\n</li>\n<li>\n<p>外部测试</p>\n<p>针对外部可见的服务器和设备（dns、firewall、电子邮箱服务器等等），模拟外部攻击者对其进行攻击，检查它们是否能够被入侵</p>\n</li>\n<li>\n<p>内部测试</p>\n<p>在内网进行攻击，检查内部攻击可以给系统造成什么程度的损害</p>\n</li>\n<li>\n<p>盲测</p>\n</li>\n<li>\n<p>双盲测试</p>\n</li>\n</ol>\n<p>开展渗透测试5个主要步骤：规划和侦察、安全扫描、获取访问权限、维持访问权限、入侵分析</p>\n<p>规划和侦察。定义测试的目标，确定要使用到的工具和方法，明确要收集的信息</p>\n<p>安全扫描。静态分析和动态分析两个阶段。静态分析，通过扫描所有代码来估计运行方式，可借助工具Fortify SCA、Checkmarx Suite。动态分析，在代码运行时扫描。</p>\n<p>获取访问权限。模拟黑客对应用程序进行网络攻击，比如使用sql注入、xss跨站脚本攻击来发现系统漏洞。</p>\n<p>维持访问权限。查看被发现的漏洞是否可以长期存在于系统中。</p>\n<p>入侵分析。分析测试结果汇总成一份详尽的测试报告</p>\n<p>常用的工具：Nmap、Aircrack-ng、SQLmap、Wifiphisher、APPScan</p>\n<p>Nmap，进行主机检测和网络扫描的，可以收集信息、漏洞和安全扫描，从主机发现、端口扫描到操作系统检测和IDS规避/欺骗</p>\n<p>Aircrack-ng，评估WiFi网络安全性，主要由网络侦测、数据包嗅探、wep和wpa/wpa2-psk破解</p>\n<p>sqlmap，进行sql注入和数据库接入</p>\n<p>Wifiphisher，恶意接入点工具，对wifi网络进行自动钓鱼攻击。</p>\n<p>appscan，ibm公司商业web应用安全测试工具</p>\n<h3 id=\"基于模型的测试\"><a class=\"header-anchor\" href=\"#基于模型的测试\" aria-hidden=\"true\">#</a> 基于模型的测试</h3>\n<p>MBT,通过建立被测系统的设计模型，结合不同的算法和策略来遍历该模型，以此生成测试用例的设计</p>\n<p>常用的模型：有限状态机、状态图、UML</p>\n</div>\n",null]}