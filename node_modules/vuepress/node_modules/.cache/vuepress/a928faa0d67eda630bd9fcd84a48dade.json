{"remainingRequest":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!C:\\Users\\Objec\\Desktop\\LearningNote\\docs\\swtest\\test-app.md?vue&type=template&id=71adb224&","dependencies":[{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\docs\\swtest\\test-app.md","mtime":1560077844217},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1559711637495},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1559711718187},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1559711637495},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vue-loader\\lib\\index.js","mtime":1559711718171},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1559711720027}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"移动端测试\"><a class=\"header-anchor\" href=\"#移动端测试\" aria-hidden=\"true\">#</a> 移动端测试</h1>\n<h2 id=\"移动端应用分类\"><a class=\"header-anchor\" href=\"#移动端应用分类\" aria-hidden=\"true\">#</a> 移动端应用分类</h2>\n<p>移动端应用分为三大类：web app、native app、hybrid app</p>\n<p><strong>web app</strong>:移动端的web浏览器，采用的技术主要是传统的html、javascript、css等web技术栈。web app所访问的页面内容都是放在服务器端的，本质上就是web页面</p>\n<p><strong>native app</strong>：移动端的原生应用，基于手机操作系统（ios和android），并使用原生程序编写运行的第三方应用程序</p>\n<p><strong>hybrid app</strong>：混合型应用，介于web app和native app两者之间的一种app形式。通过一个原生实现的native container展示html5页面，也就是在原生移动应用中潜入了webview，通过webview来访问网页。</p>\n<ol>\n<li>自适应网页设计（Responsive Web Design）,同一个网页能够自动识别屏幕分辨率、并做出相应调整的网页设计技术</li>\n</ol>\n<h2 id=\"移动应用专项测试思路和方法\"><a class=\"header-anchor\" href=\"#移动应用专项测试思路和方法\" aria-hidden=\"true\">#</a> 移动应用专项测试思路和方法</h2>\n<p>对于移动应用，顺利完成全部业务功能测试往往不够，当应用被打量用户安装和使用时，可能会出现如下问题：</p>\n<ul>\n<li>流量使用过多</li>\n<li>耗电量过大</li>\n<li>某些终端上出现崩溃或者闪退</li>\n<li>多个应用相互切换，行为异常</li>\n<li>某些终端上无法顺利安装或者卸载</li>\n<li>弱网环境下，无法正常使用</li>\n<li>android环境下，经常出现ANR</li>\n</ul>\n<p>主要可通过如下6个专项测试来展开：</p>\n<ol>\n<li>交叉事件测试</li>\n<li>兼容性测试</li>\n<li>流量测试</li>\n<li>耗电量测试</li>\n<li>弱网络测试</li>\n<li>边界测试</li>\n</ol>\n<p><strong>交叉事件测试也叫中断测试</strong>，app执行过程中，有其他事件或者应用中断当前应用执行的测试。比如说app在前台运行过程中，突然有电话打进或者收到短信、系统闹钟等等情况</p>\n<p>需要覆盖的场景包括：</p>\n<ul>\n<li>多个app同时在后台运行，并交替切换至前台是否影响正常功能</li>\n<li>相同系统资源的多个app前后台交替切换是否影响正常功能</li>\n<li>app运行时接听电话、接收信息、提示系统升级、发生系统闹钟、进入低电量模式、第三方安全软件弹出警告框、网络切换</li>\n</ul>\n<p><strong>兼容性测试</strong>，确保app在各种终端设备、各种操作系统版本、各种屏幕分辨率、各种网络环境下功能的正确性。常见覆盖如下测试场景：</p>\n<ul>\n<li>不同操作系统的兼容性，android和ios版本</li>\n<li>主流设备分辨率下的兼容性</li>\n<li>主流移动终端机型的兼容性</li>\n<li>同一操作系统中，不同语言设置时的兼容性</li>\n</ul>\n<p>不同网络连接下的兼容性，比如wifi、gprs、edge、cdma2000</p>\n<p><strong>流量测试</strong>，通常覆盖如下测试场景：</p>\n<ul>\n<li>app执行业务操作引起流量</li>\n<li>app在后台运行时的消耗流量</li>\n<li>app安装完成后首次启动耗费的流量</li>\n<li>app安装包本身的大小</li>\n<li>app内购买或者升级需要的流量</li>\n</ul>\n<p>往往借助android和ios自带的工具进行流量统计，或者利用tcpdump、wireshark、fiddler等网络分析工具</p>\n<p>android系统，网络流量信息通常存储在/proc/net/dev下，轻量级性能监控小工具emmagee，可用实时显示app运行过程中cpu、内存和流量等信息</p>\n<p>ios系统，使用xcode自带的性能分析工具集中的network activity</p>\n<p>流量测试的最终目的，并不是得到app的流量数据，而是减少app产生的流量。常用减少流量产生的方法:</p>\n<ul>\n<li>启用数据压缩，尤其是图片</li>\n<li>使用优化的数据格式，比如使用json比xml要小</li>\n<li>遇到既要压缩又要加密的，一定要先压缩再加密</li>\n<li>减少单次GUI访问调用后台的次数</li>\n<li>每次回传数据尽量只包含必要的数据</li>\n<li>启用客户端的缓存机制</li>\n</ul>\n<p><strong>耗电量测试</strong>，通常从三个方面来考量：</p>\n<ul>\n<li>app运行时但没有执行业务操作的耗电量</li>\n<li>app运行且执行业务密集的耗电量</li>\n<li>app后台运行的耗电量</li>\n</ul>\n<p>耗电量测试既有通过硬件检测的也有通过软件测试的</p>\n<p>android通过adb命令：adb shell dumpsys battery</p>\n<p>ios通过apple的官方工具sysdiagnose</p>\n<p>**弱网络测试，**移动应用的网络环境多样化，即使同一网络环境下，也会出现网络时好时坏的情况，比如时高时低的延迟、丢包、频繁断线，在乘坐地铁或者地下停车场、电梯内常出现。</p>\n<p>移动应用的测试需要尽量保证在复杂网络环境下的质量。在测试阶段，尽量模拟这些环境，在app上线前发现较多的问题并修复。移动开源的测试工具：ATC</p>\n<p><strong>边界测试</strong>，移动app在一些临界条件下的行为功能的验证测试，尽量找出所有的临界场景并对其进行验证测试。主要的场景有：</p>\n<ul>\n<li>系统内存占用大于90%</li>\n<li>系统存储占用大于95%</li>\n<li>飞行模式来回切换多次</li>\n<li>app不具有某些系统访问权限</li>\n<li>长时间使用app是否会出现系统异常，比如内存泄漏、过多的链接数</li>\n<li>ANR</li>\n<li>时区切换</li>\n<li>操作系统时间早于或者晚于标准时间</li>\n</ul>\n<h2 id=\"appium工具\"><a class=\"header-anchor\" href=\"#appium工具\" aria-hidden=\"true\">#</a> Appium工具</h2>\n<p>appium自动化测试框架，支持ios和android的app自动化测试</p>\n<h2 id=\"app测试常见问题\"><a class=\"header-anchor\" href=\"#app测试常见问题\" aria-hidden=\"true\">#</a> APP测试常见问题</h2>\n<p>app分为android 和ios 版，那么两者有什么区别呢？</p>\n<ol>\n<li>android端分辨率较多，ios较少</li>\n<li>android端操作系统较多，ios较少</li>\n<li>android端下载和安装的平台和工具渠道较多，ios主要有app store、iTunes</li>\n</ol>\n<p><strong>app测试点</strong></p>\n<ol>\n<li>功能测试：具体功能点是否都实现</li>\n<li>边界分析测试</li>\n<li>存储测试：屏幕旋转、连续加载页面、多个窗口、应用互相调用、多线程下载等等</li>\n<li>性能测试：响应时间、流量测试、耗电量测试、内存、cpu、温度</li>\n<li>兼容性测试：手机设备，不同品牌，不同分辨率，不同安卓版本，不同操作系统，可以使用商业工具testin</li>\n<li>安装卸载测试：应用可正常安装、卸载可运行</li>\n<li>交叉事件测试：操作过程中，来电话、短信、电量不足等外部事件</li>\n<li>操作类型测试：横屏、手势测试</li>\n<li>网络测试：弱网和网络切换测试</li>\n<li>压力测试：大用户量，交互性高的应用对接口执行压力测试</li>\n</ol>\n</div>\n",null]}