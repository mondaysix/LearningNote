{"remainingRequest":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!C:\\Users\\Objec\\Desktop\\LearningNote\\docs\\android\\appBase.md?vue&type=template&id=951dd272&","dependencies":[{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\docs\\android\\appBase.md","mtime":1559711629799},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1559711637495},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1559711718187},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1559711637495},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vue-loader\\lib\\index.js","mtime":1559711718171},{"path":"C:\\Users\\Objec\\Desktop\\LearningNote\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1559711720027}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_c('h1',{attrs:{\"id\":\"android-知识\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#android-知识\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" Android 知识\")]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"四大组件\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#四大组件\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" 四大组件\")]),_vm._v(\" \"),_c('blockquote',[_c('p',[_c('strong',[_vm._v(\"Activity\")])])]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"生命周期\")]),_vm._v(\"：onCreate()-->onStart()-->onResume()-->onPause()-->onStop()--->onRestart()-->onDestroy()\")]),_vm._v(\" \"),_c('p',[_vm._v(\"启动Activity：onCreate()-->onStart()-->onResume()然后Activity进入运行状态\")]),_vm._v(\" \"),_c('p',[_vm._v(\"当前Activity被其他Activity覆盖,调用onPause()\")]),_vm._v(\" \"),_c('p',[_vm._v(\"当前ACTIVITY回到前台，调用OnResume\")]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"启动模式\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"Standard（每次都会创建一个activity）、\")]),_vm._v(\" \"),_c('p',[_vm._v(\"singleTop（栈顶复用）：若需要创建的activity处于栈顶，则直接复用，onNewIntent（传入新的intent）会被调用。如果没有处于栈顶则和standard模式一致\")]),_vm._v(\" \"),_c('p',[_vm._v(\"singleTask(栈内复用)：若需要创建的activity处于栈内，则把存在他上面的所有activity都销毁\")]),_vm._v(\" \"),_c('p',[_vm._v(\"singleInstance(全局单例模式)：整个系统中只有一个\")]),_vm._v(\" \"),_c('p',[_vm._v(\"启动模式方式：\")]),_vm._v(\" \"),_c('p',[_vm._v(\"​       manifest.xml中静态指定，launchMode\")]),_vm._v(\" \"),_c('pre',[_c('code',[_vm._v(\"intent中动态指定：addFlags\\n\")])]),_vm._v(\" \"),_c('blockquote',[_c('p',[_c('strong',[_vm._v(\"Service\")])])]),_vm._v(\" \"),_c('p',[_vm._v(\"启动方式：startservice和bindservice\")]),_vm._v(\" \"),_c('p',[_vm._v(\"**startservice：**启动一个服务执行后台任务，不进行通信，停止服务使用stopservice\")]),_vm._v(\" \"),_c('p',[_vm._v(\"生命周期：startservice—>oncreate--->onstartcommand--->service running—>ondestroy\")]),_vm._v(\" \"),_c('p',[_vm._v(\"**bindservice:**启动服务可以进行通信，停止服务使用unbindservice\")]),_vm._v(\" \"),_c('p',[_vm._v(\"生命周期：bindservice---》oncreate---》onbind---》client are bound to service---》onunbind---》ondestroy\")]),_vm._v(\" \"),_c('p',[_vm._v(\"service需要注册在manifest\")]),_vm._v(\" \"),_c('p',[_vm._v(\"两者的区别：startservice与客户端是否退出没有关联关系，即使客户端停止运行，服务同样也会在后台运行。bindservice是与客户端绑定的，客户端退出，service也自动停止\")]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"BroadcastReceiver\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"静态注册和动态注册\")]),_vm._v(\" \"),_c('p',[_c('strong',[_vm._v(\"ContentProvider\")])]),_vm._v(\" \"),_c('h2',{attrs:{\"id\":\"aidl\"}},[_c('a',{staticClass:\"header-anchor\",attrs:{\"href\":\"#aidl\",\"aria-hidden\":\"true\"}},[_vm._v(\"#\")]),_vm._v(\" AIDL\")]),_vm._v(\" \"),_c('p',[_vm._v(\"Android Interface Definition Language，接口定义语言，\"),_c('strong',[_vm._v(\"为了实现进程间的通信\")])]),_vm._v(\" \"),_c('p',[_vm._v(\"每个进程都由自己的Dalvik VM实例，一块独立的内存，存储自己的数据，执行自己的操作。不同的进程不知道相互的信息，则出现了AIDL，通过AIDL制定一些规则，规定它们能进行哪些操作，一个进程可以访问另外一个进程的数据\")]),_vm._v(\" \"),_c('p',[_vm._v(\"数据类实现Parcelable接口，将需要传输的数据转化为能够在内存之间流通的形式，即序列化与反序列化\")])])}]\n\nexport { render, staticRenderFns }"]}